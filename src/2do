integrade move and calcenergy for better locality       DONE

mv mylig->coord_new to shared memory in calcenergy      DONE

move energy, movematrix from lig to rep                 DONE

tiling protein						DONE, no improvement, becuause of no reuse


alignment
https://software.intel.com/en-us/articles/vectorization-essential
https://software.intel.com/en-us/articles/data-alignment-to-assist-vectorization
_mm_malloc        intel
_mm_free



cpu code:
loop interchange


sort:
 lig by t     sparse
 prt by t     sparse
 kde by t     sparse





indirect references


ligand order DONE:
	 xx[lig__t][prt__t];			not problem, xx is in shared memory
	 mcs[m].x[lig_n[l] + 1];		problem, mcs is in glocal mem, sort by lig_n

	 if (lig_t[l] == kde->t[k])		branch divergence, not a issue, lig_t is common among warps
	 psp->psp[lig__t][prt->seq3r[p]]	no problem, outer loop

	conclusion
		t order		not sensitive, this violate the order of "n"
		n order		important, after data split, valid


example lig_t (after sort)
2  2  2  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  4  4  4  4  4  4 13 13 13 16 16 16 18 18



protein:


	xx[lig__t][prt__t];			not problem, xx is in shared memory
	if (prt->c0_and_d12_or_c2[p] == 1 && dst_pow2 <= 81.0f)     branch divergence !!!
	if (prt->c[p] == 2 && dst_minus_pmf0 <= 0 )		    branch divergence !!!
	psp->psp[lig__t][prt->seq3r[p]]	problematic ?     problem !!!!!!?????


	conclusion
		t order		329 _> 332
                c order         329 -> 335
                cdc order
                seq3r order 


example prt_t (after sort)
0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  3  3  3  4  4  4  4  5  5  5  5  5  5  5  6  6  6  6  6  6  6  7  7  7  7  7  8  8  8  8  8  9  9  9 10 10 10 11 11 11 11 12 12 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 17 17 17 17 17 18 18 19 19 19 19 20 20 20 20 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 25 25 25 25 25 26 27 28 28 28 28 28 28 29 29 29 29 29 29


example prt_c
before
after


psp:
        psp->psp[lig__t][prt->seq3r[p]]
        this structure is sparse, can creat lig_t2, and prt_t2 to index psp





kde:  DONE:
	if (lig_t[l] == kde->t[k])		branch divergence,
                                                lig sort does not help, becuase outer
                                                kde sort, helps, becuase kde_npoint ~= 400
                                                before: 0.223 kde time
                                                after 0.178 kde time
	conclusion
		t order		no abiguis

example kde_t (after sort)




mcs:	DONE
	if (mcs[m].x[lig_n] != MCS_INVALID_COORD)	 branch divergence, not important, because inner loop is around 16

	conclusion
		x order		no ambiguous







+ gpu offset, for throughput oriented simulation
symetric execution, dynamic MPI queue


export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/compilers/Intel/composer_xe_2013.5.192/compiler/lib/mic










maxwell
full	nocalc  no1st	nokde	nolhm	nodst		nohpc	novde	noele	nopmf	nopsp	nohdb
0.781   0.050	0.216	0.632	0.727	0.755		0.710	0.670	0.687

	calc	1st	kde	lhm	dst
	0.0731	0.565	0.149	0.054	0.026






ICC CPU code:
all loops are vectorized
some array are not aligned



BUG:
	client/server
		the client would not compute, if #client is greater #lig,			server side problem
		client CPU, openmp performacne scale up to 10 threads on a 2 socket 20 thread node




  #define OMP_THREADS_NEST_L2 ;

  #define STR(x) #x
  #define OMP_THREADS_NEST_L2 \
    _Pragma(STR(omp parallel for num_threads (4))) \
    report_num_threads (2);


  //reduction(+:evdw, eele, epmf, epsp, ehdb))) \





profiling

app="./main_gpu/dock -nt 11"
nvprof --devices 0 --kernels MonteCarlo_d --metrics flop_count_sp $app
nvprof --devices 0 --kernels MonteCarlo_d --metrics flop_sp_efficiency $app
nvprof --devices 0 --kernels MonteCarlo_d --analysis-metrics --output-profile XXX.nvprof_out $app

